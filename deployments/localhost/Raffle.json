{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4f05ae8c0c79e9abeee69551e146a31df59f44247a51805e236d03535a3fdc4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1212870",
    "logsBloom": "0x
    "blockHash": "0x2b5b6f5193a284196d9164f1227cd31d61627992f0b04caffd5ee7399e450988",
    "transactionHash": "0xa4f05ae8c0c79e9abeee69551e146a31df59f44247a51805e236d03535a3fdc4",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1212870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "f1f706087029b4ba5ef53eae4a4ef153",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Marcxime\",\"details\":\"This implements chainlink VRF V2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for the `upKeepNeeded to return true The following should be true in order return true: 1. Time interval should be passed 2. The lottery should have at least 1 playe, and have some ETH 3. Our subcription is funded with LINK 4. The lottery should be in an 'open' state.\"}},\"title\":\"Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEntranceFee()\":{\"notice\":\"view/pure functions \"}},\"notice\":\"This contract is for creating an untamperable lottery contaract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//Raffle\\n\\n//Enter the lottery (paying some amount)\\n\\n//Pick a random winner(verifiably random)\\n\\n//Winner to be selected every X minutes, completely automated\\n\\n//Chainlink oracle Randomness and Automated Execution (Chainlink Keepers)\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\n\\n/**\\n * @title Raffle Contract\\n * @author Marcxime\\n * @notice This contract is for creating an untamperable lottery contaract\\n * @dev This implements chainlink VRF V2 and Chainlink Keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    //Type declarations\\n    enum RaffleState {\\n        OPEN,\\n        CALCUATING\\n    }\\n    //State Variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private i_vrfCoordinator;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    //Events\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    /*Functions*/\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 keyHash,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(i_vrfCoordinator);\\n        i_keyHash = keyHash;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        //require msg.value > i_entranceFee\\n        //or error code\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        //Events\\n        //Name events with the function name revert\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for the `upKeepNeeded to return true\\n     * The following should be true in order return true:\\n     * 1. Time interval should be passed\\n     * 2. The lottery should have at least 1 playe, and have some ETH\\n     * 3. Our subcription is funded with LINK\\n     * 4. The lottery should be in an 'open' state.\\n     */\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /*performData*/\\n        )\\n    {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /*performData*/\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        //pick a random number\\n        //Do something with the number\\n        s_raffleState = RaffleState.CALCUATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /**view/pure functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public view returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x0e115728ed783b11d94e8d3dae746c68257ff3ca5b516afb89df4925a503a72c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001852380380620018528339818101604052810190620000389190620002cb565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a08181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101008163ffffffff1660e01b815250506000600260146101000a81548160ff0219169083600181111562000144576200014362000367565b5b02179055504260038190555080610120818152505050505050505062000396565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000197826200016a565b9050919050565b620001a9816200018a565b8114620001b557600080fd5b50565b600081519050620001c9816200019e565b92915050565b6000819050919050565b620001e481620001cf565b8114620001f057600080fd5b50565b6000815190506200020481620001d9565b92915050565b6000819050919050565b6200021f816200020a565b81146200022b57600080fd5b50565b6000815190506200023f8162000214565b92915050565b600067ffffffffffffffff82169050919050565b620002648162000245565b81146200027057600080fd5b50565b600081519050620002848162000259565b92915050565b600063ffffffff82169050919050565b620002a5816200028a565b8114620002b157600080fd5b50565b600081519050620002c5816200029a565b92915050565b60008060008060008060c08789031215620002eb57620002ea62000165565b5b6000620002fb89828a01620001b8565b96505060206200030e89828a01620001f3565b95505060406200032189828a016200022e565b94505060606200033489828a0162000273565b93505060806200034789828a01620002b4565b92505060a06200035a89828a01620001f3565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160e05160c01c6101005160e01c6101205161144e620004046000396000818161084001526108ae015260006106a801526000610685015260006106640152600081816102fa01526103f7015260008181610337015261038b015261144e6000f3fe6080604052600436106100c25760003560e01c8063460e20491161007f5780635f1b0fd8116100595780635f1b0fd8146102375780636e04ff0d1461026257806391ad27b4146102a0578063fd6673f5146102cb576100c2565b8063460e2049146101a4578063473f1ddc146101e157806353a2c19a1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bcf565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c61565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e15565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610bcf565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610ecc565b61056e565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190610f19565b610770565b6040516101d89190610f87565b60405180910390f35b3480156101ed57600080fd5b506101f66107b7565b6040516102039190610f87565b60405180910390f35b34801561021857600080fd5b506102216107e1565b60405161022e9190610bcf565b60405180910390f35b34801561024357600080fd5b5061024c6107f0565b6040516102599190610bcf565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190611057565b6107fd565b604051610297929190611143565b60405180910390f35b3480156102ac57600080fd5b506102b56108aa565b6040516102c29190610bcf565b60405180910390f35b3480156102d757600080fd5b506102e06108d2565b6040516102ed9190610bcf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611173565b60405180910390fd5b6103f182826108de565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bea565b5b600260149054906101000a900460ff16600181111561048557610484610bea565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600354905090565b6000610588604051806020016040528060008152506107fd565b509050806105f75747600080549050600260149054906101000a900460ff1660018111156105b9576105b8610bea565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ee9392919061119c565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561061d5761061c610bea565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e995949392919061124b565b602060405180830381600087803b15801561070357600080fd5b505af1158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b91906112b3565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000808281548110610785576107846112e0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561082557610824610bea565b5b6000600181111561083957610838610bea565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261086d919061133e565b1190506000806000805490501190506000804711905083801561088d5750825b80156108965750815b801561089f5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106108f9576108f86112e0565b5b602002602001015161090b91906113a1565b90506000808281548110610922576109216112e0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff021916908360018111156109b6576109b5610bea565b5b0217905550600067ffffffffffffffff8111156109d6576109d5610cd2565b5b604051908082528060200260200182016040528015610a045781602001602082028036833780820191505090505b5060009080519060200190610a1a929190610b0f565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4890611403565b60006040518083038185875af1925050503d8060008114610a85576040519150601f19603f3d011682016040523d82523d6000602084013e610a8a565b606091505b5050905080610ac5576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b88579160200282015b82811115610b875782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2f565b5b509050610b959190610b99565b5090565b5b80821115610bb2576000816000905550600101610b9a565b5090565b6000819050919050565b610bc981610bb6565b82525050565b6000602082019050610be46000830184610bc0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c2a57610c29610bea565b5b50565b6000819050610c3b82610c19565b919050565b6000610c4b82610c2d565b9050919050565b610c5b81610c40565b82525050565b6000602082019050610c766000830184610c52565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9981610bb6565b8114610ca457600080fd5b50565b600081359050610cb681610c90565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0a82610cc1565b810181811067ffffffffffffffff82111715610d2957610d28610cd2565b5b80604052505050565b6000610d3c610c7c565b9050610d488282610d01565b919050565b600067ffffffffffffffff821115610d6857610d67610cd2565b5b602082029050602081019050919050565b600080fd5b6000610d91610d8c84610d4d565b610d32565b90508083825260208201905060208402830185811115610db457610db3610d79565b5b835b81811015610ddd5780610dc98882610ca7565b845260208401935050602081019050610db6565b5050509392505050565b600082601f830112610dfc57610dfb610cbc565b5b8135610e0c848260208601610d7e565b91505092915050565b60008060408385031215610e2c57610e2b610c86565b5b6000610e3a85828601610ca7565b925050602083013567ffffffffffffffff811115610e5b57610e5a610c8b565b5b610e6785828601610de7565b9150509250929050565b600080fd5b60008083601f840112610e8c57610e8b610cbc565b5b8235905067ffffffffffffffff811115610ea957610ea8610e71565b5b602083019150836001820283011115610ec557610ec4610d79565b5b9250929050565b60008060208385031215610ee357610ee2610c86565b5b600083013567ffffffffffffffff811115610f0157610f00610c8b565b5b610f0d85828601610e76565b92509250509250929050565b600060208284031215610f2f57610f2e610c86565b5b6000610f3d84828501610ca7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f7182610f46565b9050919050565b610f8181610f66565b82525050565b6000602082019050610f9c6000830184610f78565b92915050565b600080fd5b600067ffffffffffffffff821115610fc257610fc1610cd2565b5b610fcb82610cc1565b9050602081019050919050565b82818337600083830152505050565b6000610ffa610ff584610fa7565b610d32565b90508281526020810184848401111561101657611015610fa2565b5b611021848285610fd8565b509392505050565b600082601f83011261103e5761103d610cbc565b5b813561104e848260208601610fe7565b91505092915050565b60006020828403121561106d5761106c610c86565b5b600082013567ffffffffffffffff81111561108b5761108a610c8b565b5b61109784828501611029565b91505092915050565b60008115159050919050565b6110b5816110a0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f55780820151818401526020810190506110da565b83811115611104576000848401525b50505050565b6000611115826110bb565b61111f81856110c6565b935061112f8185602086016110d7565b61113881610cc1565b840191505092915050565b600060408201905061115860008301856110ac565b818103602083015261116a818461110a565b90509392505050565b60006040820190506111886000830185610f78565b6111956020830184610f78565b9392505050565b60006060820190506111b16000830186610bc0565b6111be6020830185610bc0565b6111cb6040830184610bc0565b949350505050565b6000819050919050565b6111e6816111d3565b82525050565b600067ffffffffffffffff82169050919050565b611209816111ec565b82525050565b600061ffff82169050919050565b6112268161120f565b82525050565b600063ffffffff82169050919050565b6112458161122c565b82525050565b600060a08201905061126060008301886111dd565b61126d6020830187611200565b61127a604083018661121d565b611287606083018561123c565b611294608083018461123c565b9695505050505050565b6000815190506112ad81610c90565b92915050565b6000602082840312156112c9576112c8610c86565b5b60006112d78482850161129e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134982610bb6565b915061135483610bb6565b9250828210156113675761136661130f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113ac82610bb6565b91506113b783610bb6565b9250826113c7576113c6611372565b5b828206905092915050565b600081905092915050565b50565b60006113ed6000836113d2565b91506113f8826113dd565b600082019050919050565b600061140e826113e0565b915081905091905056fea26469706673582212201cde92e52572fe80c2eff14333064ba26be16c94b080284bb06ef21c84e836b864736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063460e20491161007f5780635f1b0fd8116100595780635f1b0fd8146102375780636e04ff0d1461026257806391ad27b4146102a0578063fd6673f5146102cb576100c2565b8063460e2049146101a4578063473f1ddc146101e157806353a2c19a1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bcf565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c61565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e15565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610bcf565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610ecc565b61056e565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190610f19565b610770565b6040516101d89190610f87565b60405180910390f35b3480156101ed57600080fd5b506101f66107b7565b6040516102039190610f87565b60405180910390f35b34801561021857600080fd5b506102216107e1565b60405161022e9190610bcf565b60405180910390f35b34801561024357600080fd5b5061024c6107f0565b6040516102599190610bcf565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190611057565b6107fd565b604051610297929190611143565b60405180910390f35b3480156102ac57600080fd5b506102b56108aa565b6040516102c29190610bcf565b60405180910390f35b3480156102d757600080fd5b506102e06108d2565b6040516102ed9190610bcf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611173565b60405180910390fd5b6103f182826108de565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610bea565b5b600260149054906101000a900460ff16600181111561048557610484610bea565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600354905090565b6000610588604051806020016040528060008152506107fd565b509050806105f75747600080549050600260149054906101000a900460ff1660018111156105b9576105b8610bea565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ee9392919061119c565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561061d5761061c610bea565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e995949392919061124b565b602060405180830381600087803b15801561070357600080fd5b505af1158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b91906112b3565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000808281548110610785576107846112e0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561082557610824610bea565b5b6000600181111561083957610838610bea565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261086d919061133e565b1190506000806000805490501190506000804711905083801561088d5750825b80156108965750815b801561089f5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106108f9576108f86112e0565b5b602002602001015161090b91906113a1565b90506000808281548110610922576109216112e0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff021916908360018111156109b6576109b5610bea565b5b0217905550600067ffffffffffffffff8111156109d6576109d5610cd2565b5b604051908082528060200260200182016040528015610a045781602001602082028036833780820191505090505b5060009080519060200190610a1a929190610b0f565b504260038190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4890611403565b60006040518083038185875af1925050503d8060008114610a85576040519150601f19603f3d011682016040523d82523d6000602084013e610a8a565b606091505b5050905080610ac5576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b88579160200282015b82811115610b875782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2f565b5b509050610b959190610b99565b5090565b5b80821115610bb2576000816000905550600101610b9a565b5090565b6000819050919050565b610bc981610bb6565b82525050565b6000602082019050610be46000830184610bc0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c2a57610c29610bea565b5b50565b6000819050610c3b82610c19565b919050565b6000610c4b82610c2d565b9050919050565b610c5b81610c40565b82525050565b6000602082019050610c766000830184610c52565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9981610bb6565b8114610ca457600080fd5b50565b600081359050610cb681610c90565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0a82610cc1565b810181811067ffffffffffffffff82111715610d2957610d28610cd2565b5b80604052505050565b6000610d3c610c7c565b9050610d488282610d01565b919050565b600067ffffffffffffffff821115610d6857610d67610cd2565b5b602082029050602081019050919050565b600080fd5b6000610d91610d8c84610d4d565b610d32565b90508083825260208201905060208402830185811115610db457610db3610d79565b5b835b81811015610ddd5780610dc98882610ca7565b845260208401935050602081019050610db6565b5050509392505050565b600082601f830112610dfc57610dfb610cbc565b5b8135610e0c848260208601610d7e565b91505092915050565b60008060408385031215610e2c57610e2b610c86565b5b6000610e3a85828601610ca7565b925050602083013567ffffffffffffffff811115610e5b57610e5a610c8b565b5b610e6785828601610de7565b9150509250929050565b600080fd5b60008083601f840112610e8c57610e8b610cbc565b5b8235905067ffffffffffffffff811115610ea957610ea8610e71565b5b602083019150836001820283011115610ec557610ec4610d79565b5b9250929050565b60008060208385031215610ee357610ee2610c86565b5b600083013567ffffffffffffffff811115610f0157610f00610c8b565b5b610f0d85828601610e76565b92509250509250929050565b600060208284031215610f2f57610f2e610c86565b5b6000610f3d84828501610ca7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f7182610f46565b9050919050565b610f8181610f66565b82525050565b6000602082019050610f9c6000830184610f78565b92915050565b600080fd5b600067ffffffffffffffff821115610fc257610fc1610cd2565b5b610fcb82610cc1565b9050602081019050919050565b82818337600083830152505050565b6000610ffa610ff584610fa7565b610d32565b90508281526020810184848401111561101657611015610fa2565b5b611021848285610fd8565b509392505050565b600082601f83011261103e5761103d610cbc565b5b813561104e848260208601610fe7565b91505092915050565b60006020828403121561106d5761106c610c86565b5b600082013567ffffffffffffffff81111561108b5761108a610c8b565b5b61109784828501611029565b91505092915050565b60008115159050919050565b6110b5816110a0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f55780820151818401526020810190506110da565b83811115611104576000848401525b50505050565b6000611115826110bb565b61111f81856110c6565b935061112f8185602086016110d7565b61113881610cc1565b840191505092915050565b600060408201905061115860008301856110ac565b818103602083015261116a818461110a565b90509392505050565b60006040820190506111886000830185610f78565b6111956020830184610f78565b9392505050565b60006060820190506111b16000830186610bc0565b6111be6020830185610bc0565b6111cb6040830184610bc0565b949350505050565b6000819050919050565b6111e6816111d3565b82525050565b600067ffffffffffffffff82169050919050565b611209816111ec565b82525050565b600061ffff82169050919050565b6112268161120f565b82525050565b600063ffffffff82169050919050565b6112458161122c565b82525050565b600060a08201905061126060008301886111dd565b61126d6020830187611200565b61127a604083018661121d565b611287606083018561123c565b611294608083018461123c565b9695505050505050565b6000815190506112ad81610c90565b92915050565b6000602082840312156112c9576112c8610c86565b5b60006112d78482850161129e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134982610bb6565b915061135483610bb6565b9250828210156113675761136661130f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113ac82610bb6565b91506113b783610bb6565b9250826113c7576113c6611372565b5b828206905092915050565b600081905092915050565b50565b60006113ed6000836113d2565b91506113f8826113dd565b600082019050919050565b600061140e826113e0565b915081905091905056fea26469706673582212201cde92e52572fe80c2eff14333064ba26be16c94b080284bb06ef21c84e836b864736f6c63430008080033",
  "devdoc": {
    "author": "Marcxime",
    "details": "This implements chainlink VRF V2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for the `upKeepNeeded to return true The following should be true in order return true: 1. Time interval should be passed 2. The lottery should have at least 1 playe, and have some ETH 3. Our subcription is funded with LINK 4. The lottery should be in an 'open' state."
      }
    },
    "title": "Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getEntranceFee()": {
        "notice": "view/pure functions "
      }
    },
    "notice": "This contract is for creating an untamperable lottery contaract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_vrfCoordinator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VRFCoordinatorV2Interface)176"
      },
      {
        "astId": 225,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(RaffleState)203"
      },
      {
        "astId": 230,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)176": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleState)203": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}